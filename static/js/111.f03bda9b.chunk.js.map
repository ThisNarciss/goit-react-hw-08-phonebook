{"version":3,"file":"static/js/111.f03bda9b.chunk.js","mappings":"gYAGaA,GAAWC,EAAAA,EAAAA,GAAOC,EAAAA,GAAPD,CAAH,uJASRE,EAAWF,EAAAA,EAAAA,IAAH,8HAQRG,EAAQH,EAAAA,EAAAA,MAAH,4CAILI,GAAYJ,EAAAA,EAAAA,GAAOK,EAAAA,GAAPL,CAAH,2iBAuBTM,GAAaN,EAAAA,EAAAA,GAAOC,EAAAA,GAAPD,CAAH,iPAUVO,GAAcP,EAAAA,EAAAA,GAAOK,EAAAA,GAAPL,CAAH,ikBAwBXQ,EAAcR,EAAAA,EAAAA,MAAH,kEAKXS,GAAQT,EAAAA,EAAAA,GAAOU,EAAAA,GAAPV,CAAH,0D,oFCpFLW,EAAWX,EAAAA,EAAAA,IAAH,0CAGRY,EAAaZ,EAAAA,EAAAA,QAAH,sIAQVa,EAAQb,EAAAA,EAAAA,GAAH,2N,SCVX,SAASc,EAAT,GAAuC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SAC/B,OACE,UAACJ,EAAD,YACE,SAACD,EAAD,WACE,SAACE,EAAD,UAAQE,MAETC,IAGN,C,0KCGKC,GAAUC,EAAAA,EAAAA,MACVC,GAAaD,EAAAA,EAAAA,MAEbE,EAASC,EAAAA,KAAaC,MAAM,CAChCC,MAAOF,EAAAA,KAAaG,OAAOC,WAC3BC,SAAUL,EAAAA,KAAaM,IAAI,GAAGH,OAAOC,aAGjCG,EAAe,CACnBL,MAAO,GACPG,SAAU,IAGL,SAASG,IACd,IAAMC,GAAWC,EAAAA,EAAAA,MAWjB,OACE,SAACjB,EAAA,EAAD,CAASC,MAAM,UAAf,UACE,SAACiB,EAAA,EAAD,CAAWC,SAAS,KAApB,UACE,SAAC,KAAD,CACEC,iBAAkBd,EAClBe,cAAeP,EACfQ,SAXiB,SAACC,EAAD,GAA4B,IAAjBC,EAAgB,EAAhBA,WAJjB,SAAAD,GACjBP,GAASS,EAAAA,EAAAA,IAAUF,GACpB,CAGCG,CAAWH,GACXC,GACD,EAKK,UAKE,UAAC,KAAD,YACE,SAAC,KAAD,CAAaG,QAASxB,EAAtB,oBACA,SAAC,KAAD,CACEyB,KAAK,QACLC,KAAK,QACLC,GAAI3B,EACJQ,UAAQ,EACRoB,YAAY,YAEd,SAAC,KAAD,CAAOF,KAAK,QAAQG,UAAU,OAE9B,SAAC,KAAD,CAAaL,QAAStB,EAAtB,uBACA,SAAC,KAAD,CACEuB,KAAK,WACLC,KAAK,WACLC,GAAIzB,EACJM,UAAQ,EACRoB,YAAY,eAEd,SAAC,KAAD,CAAOF,KAAK,WAAWG,UAAU,OAEjC,SAACC,EAAA,EAAD,CAAQL,KAAK,SAASM,QAAQ,YAA9B,2BAQX,CC3Ec,SAASC,IACtB,OACE,2BACE,SAACpB,EAAD,KAGL,C,2BCMKG,GAAYkB,E,QAAAA,KA4ClB,K","sources":["components/FormStyle.styled.jsx","components/Section/Section.styled.jsx","components/Section/Section.jsx","components/LoginForm/LoginForm.jsx","pages/Login.jsx","../node_modules/@mui/system/esm/Container/Container.js"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Form, Field, ErrorMessage } from 'formik';\n\nexport const UserForm = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  justify-content: center;\n  align-items: center;\n  gap: 10px;\n`;\n\nexport const InputBox = styled.div`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n  max-width: 400px;\n`;\n\nexport const Label = styled.label`\n  font-size: 14px;\n`;\n\nexport const FormInput = styled(Field)`\n  display: block;\n  width: 100%;\n  height: calc(2.25rem + 2px);\n  padding: 0.3rem 0.75rem;\n  font-family: inherit;\n  font-size: 1rem;\n  font-weight: 400;\n  line-height: 1.5;\n  color: #212529;\n  background-color: #fff;\n  border: 1px solid #bdbdbd;\n  border-radius: 0.25rem;\n  transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;\n  :focus {\n    color: #212529;\n    background-color: #fff;\n    border-color: #bdbdbd;\n    outline: 0;\n    box-shadow: 0 0 0 0.2rem rgba(158, 158, 158, 0.25);\n  }\n`;\n\nexport const FormRegLog = styled(Form)`\n  max-width: 500px;\n  padding: 10px 20px;\n  background: #ffffff;\n  margin: 0 auto;\n  padding: 20px;\n  box-shadow: 0 3px 1px rgba(0, 0, 0, 0.1), 0 1px 2px rgba(0, 0, 0, 0.08),\n    0 2px 2px rgba(0, 0, 0, 0.12);\n`;\n\nexport const InputRegLog = styled(Field)`\n  display: block;\n  width: 100%;\n  height: calc(2.25rem + 2px);\n  padding: 0.3rem 0.75rem;\n  margin: 10px auto;\n  font-family: inherit;\n  font-size: 1rem;\n  font-weight: 400;\n  line-height: 1.5;\n  color: #212529;\n  background-color: #fff;\n  border: 1px solid #bdbdbd;\n  border-radius: 0.25rem;\n  transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;\n  :focus {\n    color: #212529;\n    background-color: #fff;\n    border-color: #bdbdbd;\n    outline: 0;\n    box-shadow: 0 0 0 0.2rem rgba(158, 158, 158, 0.25);\n  }\n`;\n\nexport const LabelRegLog = styled.label`\n  display: block;\n  margin-bottom: 8px;\n`;\n\nexport const Error = styled(ErrorMessage)`\n  font-size: 10px;\n  color: red;\n`;\n","import styled from '@emotion/styled';\n\nexport const TitleBox = styled.div`\n  display: flex;\n`;\nexport const SectionBox = styled.section`\n  margin: 0 auto;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 20px 0px;\n`;\n\nexport const Title = styled.h1`\n  position: absolute;\n  white-space: nowrap;\n  width: 1px;\n  height: 1px;\n  overflow: hidden;\n  border: 0;\n  padding: 0;\n  clip: rect(0 0 0 0);\n  clip-path: inset(50%);\n  margin: -1px;\n`;\n","import PropTypes from 'prop-types';\nimport { SectionBox, Title, TitleBox } from './Section.styled';\n\nexport function Section({ title, children }) {\n  return (\n    <SectionBox>\n      <TitleBox>\n        <Title>{title}</Title>\n      </TitleBox>\n      {children}\n    </SectionBox>\n  );\n}\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.node,\n};\n","import { nanoid } from 'nanoid';\nimport * as yup from 'yup';\nimport { useDispatch } from 'react-redux';\nimport { loginUser } from 'redux/auth/operations';\nimport Button from '@mui/material/Button';\nimport { Section } from 'components/Section/Section';\nimport { Container } from '@mui/system';\nimport { Formik } from 'formik';\nimport {\n  Error,\n  FormRegLog,\n  InputRegLog,\n  LabelRegLog,\n} from 'components/FormStyle.styled';\n\nconst emailId = nanoid();\nconst passwordId = nanoid();\n\nconst schema = yup.object().shape({\n  email: yup.string().trim().required(),\n  password: yup.string().min(7).trim().required(),\n});\n\nconst initialValue = {\n  email: '',\n  password: '',\n};\n\nexport function LoginForm() {\n  const dispatch = useDispatch();\n\n  const signInUser = values => {\n    dispatch(loginUser(values));\n  };\n\n  const handleFormSubmit = (values, { resetForm }) => {\n    signInUser(values);\n    resetForm();\n  };\n\n  return (\n    <Section title=\"Sign In\">\n      <Container maxWidth=\"xl\">\n        <Formik\n          validationSchema={schema}\n          initialValues={initialValue}\n          onSubmit={handleFormSubmit}\n        >\n          <FormRegLog>\n            <LabelRegLog htmlFor={emailId}>Email</LabelRegLog>\n            <InputRegLog\n              type=\"email\"\n              name=\"email\"\n              id={emailId}\n              required\n              placeholder=\"Email*\"\n            />\n            <Error name=\"email\" component=\"p\" />\n\n            <LabelRegLog htmlFor={passwordId}>Password</LabelRegLog>\n            <InputRegLog\n              type=\"password\"\n              name=\"password\"\n              id={passwordId}\n              required\n              placeholder=\"Password*\"\n            />\n            <Error name=\"password\" component=\"p\" />\n\n            <Button type=\"submit\" variant=\"contained\">\n              Login\n            </Button>\n          </FormRegLog>\n        </Formik>\n      </Container>\n    </Section>\n  );\n}\n","import { LoginForm } from 'components/LoginForm/LoginForm';\n\nexport default function Login() {\n  return (\n    <main>\n      <LoginForm />\n    </main>\n  );\n}\n","import PropTypes from 'prop-types';\nimport createContainer from './createContainer';\n\n/**\n *\n * Demos:\n *\n * - [Container (Material UI)](https://mui.com/material-ui/react-container/)\n * - [Container (MUI System)](https://mui.com/system/react-container/)\n *\n * API:\n *\n * - [Container API](https://mui.com/system/api/container/)\n */\nconst Container = createContainer();\nprocess.env.NODE_ENV !== \"production\" ? Container.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * If `true`, the left and right padding is removed.\n   * @default false\n   */\n  disableGutters: PropTypes.bool,\n  /**\n   * Set the max-width to match the min-width of the current breakpoint.\n   * This is useful if you'd prefer to design for a fixed set of sizes\n   * instead of trying to accommodate a fully fluid viewport.\n   * It's fluid by default.\n   * @default false\n   */\n  fixed: PropTypes.bool,\n  /**\n   * Determine the max-width of the container.\n   * The container width grows with the size of the screen.\n   * Set to `false` to disable `maxWidth`.\n   * @default 'lg'\n   */\n  maxWidth: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl', false]), PropTypes.string]),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default Container;"],"names":["UserForm","styled","Form","InputBox","Label","FormInput","Field","FormRegLog","InputRegLog","LabelRegLog","Error","ErrorMessage","TitleBox","SectionBox","Title","Section","title","children","emailId","nanoid","passwordId","schema","yup","shape","email","trim","required","password","min","initialValue","LoginForm","dispatch","useDispatch","Container","maxWidth","validationSchema","initialValues","onSubmit","values","resetForm","loginUser","signInUser","htmlFor","type","name","id","placeholder","component","Button","variant","Login","createContainer"],"sourceRoot":""}