{"version":3,"file":"static/js/166.da5e127a.chunk.js","mappings":"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","sources":["components/FormStyle.styled.jsx","components/Section/Section.styled.jsx","components/Section/Section.jsx","components/App.styled.jsx","components/ContactForm/ContactForm.jsx","components/ContactItem/ContactItem.styled.jsx","components/UpdateModalForm/UpdateModalForm.jsx","components/ContactItem/ContactItem.jsx","redux/selectors.js","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","pages/Contacts.jsx","redux/contacts/selectors.js","redux/filter/selectors.js"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Form, Field, ErrorMessage } from 'formik';\n\nexport const UserForm = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  justify-content: center;\n  align-items: center;\n  gap: 10px;\n`;\n\nexport const InputBox = styled.div`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n  max-width: 400px;\n`;\n\nexport const Label = styled.label`\n  font-size: 14px;\n`;\n\nexport const FormInput = styled(Field)`\n  display: block;\n  width: 100%;\n  height: calc(2.25rem + 2px);\n  padding: 0.3rem 0.75rem;\n  font-family: inherit;\n  font-size: 1rem;\n  font-weight: 400;\n  line-height: 1.5;\n  color: #212529;\n  background-color: #fff;\n  border: 1px solid #bdbdbd;\n  border-radius: 0.25rem;\n  transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;\n  :focus {\n    color: #212529;\n    background-color: #fff;\n    border-color: #bdbdbd;\n    outline: 0;\n    box-shadow: 0 0 0 0.2rem rgba(158, 158, 158, 0.25);\n  }\n`;\n\nexport const FormRegLog = styled(Form)`\n  max-width: 500px;\n  padding: 10px 20px;\n  background: #ffffff;\n  margin: 0 auto;\n  padding: 20px;\n  box-shadow: 0 3px 1px rgba(0, 0, 0, 0.1), 0 1px 2px rgba(0, 0, 0, 0.08),\n    0 2px 2px rgba(0, 0, 0, 0.12);\n`;\n\nexport const InputRegLog = styled(Field)`\n  display: block;\n  width: 100%;\n  height: calc(2.25rem + 2px);\n  padding: 0.3rem 0.75rem;\n  margin: 10px auto;\n  font-family: inherit;\n  font-size: 1rem;\n  font-weight: 400;\n  line-height: 1.5;\n  color: #212529;\n  background-color: #fff;\n  border: 1px solid #bdbdbd;\n  border-radius: 0.25rem;\n  transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;\n  :focus {\n    color: #212529;\n    background-color: #fff;\n    border-color: #bdbdbd;\n    outline: 0;\n    box-shadow: 0 0 0 0.2rem rgba(158, 158, 158, 0.25);\n  }\n`;\n\nexport const LabelRegLog = styled.label`\n  display: block;\n  margin-bottom: 8px;\n`;\n\nexport const Error = styled(ErrorMessage)`\n  font-size: 10px;\n  color: red;\n`;\n","import styled from '@emotion/styled';\n\nexport const TitleBox = styled.div`\n  display: flex;\n`;\nexport const SectionBox = styled.section`\n  margin: 0 auto;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 20px 0px;\n`;\n\nexport const Title = styled.h1`\n  position: absolute;\n  white-space: nowrap;\n  width: 1px;\n  height: 1px;\n  overflow: hidden;\n  border: 0;\n  padding: 0;\n  clip: rect(0 0 0 0);\n  clip-path: inset(50%);\n  margin: -1px;\n`;\n","import PropTypes from 'prop-types';\nimport { SectionBox, Title, TitleBox } from './Section.styled';\n\nexport function Section({ title, children }) {\n  return (\n    <SectionBox>\n      <TitleBox>\n        <Title>{title}</Title>\n      </TitleBox>\n      {children}\n    </SectionBox>\n  );\n}\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.node,\n};\n","import styled from '@emotion/styled';\n\nexport const ChildrenBox = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 30px;\n  width: 100%;\n  max-width: 350px;\n`;\n\nexport const Notification = styled.p`\n  padding: 20px 40px;\n  font: 20px;\n  border-radius: 5px;\n  border: 1px solid red;\n  color: red;\n  margin-bottom: 20px;\n`;\n\nexport const Figure = styled.figure`\n  $unit: 60vmin;\n  margin-left: 2em;\n  height: 1.43 * $unit;\n  width: $unit;\n  line-height: 1.43 * $unit;\n  border-width: $unit/20;\n  border-radius: $unit/14;\n  background-image: linear-gradient(rgba(0, 0, 0, 0), #111),\n    url(https://www.apple.com/v/ipad-pro/s/images/overview/retina_screen_1__csuokryyjb42_large.jpg);\n  z-index: 100;\n  display: block;\n  /* color: #fff; */\n  text-align: center;\n  font-family: 'SF Pro Display', Helvetica Neue, Arial, sans-serif;\n  letter-spacing: -0.022em;\n  font-size: 2.5vmin;\n  text-shadow: 0 0 0.5em #000;\n  background-color: #000;\n  background-size: auto 200%, cover;\n  background-repeat: no-repeat, no-repeat;\n  border: solid #111;\n  margin-bottom: 2em;\n  position: relative;\n  box-shadow: 0 0.5em 2em 0.2em rgba(0, 0, 0, 0.33), 0 0 0 0.5px #000 inset;\n  transition: all 0.1s linear, line-height 0s linear;\n  background-position: 50% 100%, center;\n  transform-origin: bottom center;\n  &:hover {\n    /* color: transparent; */\n    text-shadow: 0 0 0em transparent;\n    background-position: 50% -100%, center center;\n    transition: all 0.15s linear, line-height 5s linear;\n    box-shadow: 0 0.5em 3em 0.25em rgba(0, 0, 0, 0.33), 0 0 0 1px #000 inset;\n    transform: scale(1.0025);\n    /* line-height: 0vmin; */\n  }\n`;\n","import { nanoid } from 'nanoid';\nimport {\n  UserForm,\n  InputBox,\n  Label,\n  FormInput,\n  Error,\n} from 'components/FormStyle.styled';\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { failureNameNotify, failureNumberNotify } from 'utils/notification';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport Button from '@mui/material/Button';\nimport AddCircleIcon from '@mui/icons-material/AddCircle';\n\nconst schema = yup.object().shape({\n  name: yup.string().min(2).max(30).trim().required(),\n  number: yup.string().min(12).max(13).trim().required(),\n});\n\nconst nameInputId = nanoid();\nconst numberInputId = nanoid();\n\nconst initialValue = {\n  name: '',\n  number: '',\n};\n\nexport const ContactForm = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const addNewContact = obj => {\n    const findName = contacts.find(\n      ({ name }) => name.toLowerCase() === obj.name.toLowerCase()\n    );\n    const findNumber = contacts.find(\n      ({ number }) => number.toLowerCase() === obj.number.toLowerCase()\n    );\n\n    if (findName) {\n      failureNameNotify(findName);\n      return;\n    }\n    if (findNumber) {\n      failureNumberNotify(findNumber);\n      return;\n    }\n\n    dispatch(addContact(obj));\n  };\n\n  const handleFormSubmit = (values, { resetForm }) => {\n    addNewContact(values);\n    resetForm();\n  };\n\n  return (\n    <Formik\n      validationSchema={schema}\n      initialValues={initialValue}\n      onSubmit={handleFormSubmit}\n    >\n      <UserForm>\n        <InputBox>\n          <Label htmlFor={nameInputId}>Name</Label>\n          <FormInput\n            id={nameInputId}\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n          <Error name=\"name\" component=\"p\" />\n        </InputBox>\n\n        <InputBox>\n          <Label htmlFor={numberInputId}>Number</Label>\n          <FormInput\n            id={numberInputId}\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n          <Error name=\"number\" component=\"p\" />\n        </InputBox>\n        <Button\n          type=\"submit\"\n          variant=\"contained\"\n          size=\"large\"\n          endIcon={<AddCircleIcon fontSize=\"large\" />}\n        >\n          Add\n        </Button>\n      </UserForm>\n    </Formik>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const Item = styled.li`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  gap: 10px;\n  border: 1px solid #bdbdbd;\n  padding: 5px;\n`;\n\nexport const Text = styled.p``;\n\nexport const ContainerBtn = styled.div`\n  display: flex;\n`;\n","import PropTypes from 'prop-types';\nimport * as yup from 'yup';\nimport Box from '@mui/material/Box';\nimport IconButton from '@mui/material/IconButton';\nimport EditIcon from '@mui/icons-material/Edit';\nimport Modal from '@mui/material/Modal';\nimport { nanoid } from 'nanoid';\nimport { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { editContact } from 'redux/contacts/operations';\nimport { LoaderBtn } from 'components/Loader/Loader';\nimport { Formik } from 'formik';\nimport Button from '@mui/material/Button';\nimport AddCircleIcon from '@mui/icons-material/AddCircle';\nimport {\n  Error,\n  FormInput,\n  InputBox,\n  Label,\n  UserForm,\n} from 'components/FormStyle.styled';\n\nconst style = {\n  position: 'absolute',\n  top: '50%',\n  left: '50%',\n  transform: 'translate(-50%, -50%)',\n  width: 400,\n  bgcolor: 'background.paper',\n  border: '2px solid #000',\n  boxShadow: 24,\n  p: 4,\n};\n\nconst schema = yup.object().shape({\n  name: yup.string().min(2).max(30).trim().required(),\n  number: yup.string().min(12).max(13).trim().required(),\n});\n\nconst nameInputId = nanoid();\nconst numberInputId = nanoid();\n\nexport function UpdateModalForm({ id, name, number }) {\n  const [editBtnId, setEditBtnId] = useState(0);\n  const [isEdit, setIsEdit] = useState(false);\n  const [open, setOpen] = useState(false);\n  const dispatch = useDispatch();\n\n  const handleOpen = () => {\n    setEditBtnId(id);\n    setOpen(true);\n  };\n  const handleClose = () => setOpen(false);\n\n  const editedContact = value => {\n    setIsEdit(true);\n    dispatch(\n      editContact({\n        id: editBtnId,\n        value: { name: value.name, number: value.number },\n      })\n    )\n      .unwrap()\n      .finally(() => setIsEdit(false));\n    setOpen(false);\n  };\n\n  const handleSubmitEditsContact = (values, { resetForm }) => {\n    editedContact(values);\n    resetForm();\n  };\n\n  return (\n    <>\n      <IconButton aria-label=\"edits\" size=\"medium\" onClick={handleOpen}>\n        {!isEdit && <EditIcon fontSize=\"inherit\" />}\n        {isEdit && editBtnId === id && <LoaderBtn />}\n      </IconButton>\n\n      <Modal\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"modal-modal-title\"\n        aria-describedby=\"modal-modal-description\"\n      >\n        <Box sx={style}>\n          <Formik\n            validationSchema={schema}\n            initialValues={{ name, number }}\n            onSubmit={handleSubmitEditsContact}\n          >\n            {({ values }) => (\n              <UserForm>\n                <InputBox>\n                  <Label htmlFor={nameInputId}>Name</Label>\n                  <FormInput\n                    id={nameInputId}\n                    type=\"text\"\n                    name=\"name\"\n                    pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                    title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                    required\n                    value={values.name}\n                  />\n                  <Error name=\"name\" component=\"p\" />\n                </InputBox>\n\n                <InputBox>\n                  <Label htmlFor={numberInputId}>Number</Label>\n                  <FormInput\n                    id={numberInputId}\n                    type=\"tel\"\n                    name=\"number\"\n                    pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                    title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                    required\n                    value={values.number}\n                  />\n                  <Error name=\"number\" component=\"p\" />\n                </InputBox>\n                <Button\n                  type=\"submit\"\n                  variant=\"contained\"\n                  size=\"large\"\n                  endIcon={<AddCircleIcon fontSize=\"large\" />}\n                >\n                  Edit\n                </Button>\n              </UserForm>\n            )}\n          </Formik>\n        </Box>\n      </Modal>\n    </>\n  );\n}\n\nUpdateModalForm.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { ContainerBtn, Item, Text } from './ContactItem.styled';\nimport { BiUser } from 'react-icons/bi';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { LoaderBtn } from 'components/Loader/Loader';\nimport { useState } from 'react';\nimport IconButton from '@mui/material/IconButton';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport { UpdateModalForm } from 'components/UpdateModalForm/UpdateModalForm';\n\nexport function ContactItem({ id, name, number }) {\n  const [deleteBtnId, setDeleteBtnId] = useState(0);\n  const [isDeleting, setIsDeleting] = useState(false);\n  const dispatch = useDispatch();\n\n  const onBtnDeleteClick = id => {\n    setDeleteBtnId(id);\n    setIsDeleting(true);\n    dispatch(deleteContact(id))\n      .unwrap()\n      .finally(() => setIsDeleting(false));\n  };\n\n  return (\n    <Item>\n      <BiUser />\n      <Text>\n        {name}: {number}\n      </Text>\n      <ContainerBtn>\n        <IconButton\n          aria-label=\"delete\"\n          size=\"medium\"\n          onClick={() => {\n            onBtnDeleteClick(id);\n          }}\n          disabled={isDeleting}\n        >\n          {!isDeleting && <DeleteIcon fontSize=\"inherit\" />}\n          {isDeleting && deleteBtnId === id && <LoaderBtn />}\n        </IconButton>\n        <UpdateModalForm id={id} name={name} number={number} />\n      </ContainerBtn>\n    </Item>\n  );\n}\n\nContactItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n","const { createSelector } = require('@reduxjs/toolkit');\nconst { selectContacts } = require('redux/contacts/selectors');\nconst { selectFilter } = require('redux/filter/selectors');\n\nexport const selectSortContacts = createSelector([selectContacts], contacts =>\n  [...contacts].sort((a, b) => {\n    return a.name.localeCompare(b.name);\n  })\n);\nexport const selectFilterContacts = createSelector(\n  [selectFilter, selectSortContacts],\n  (filter, contacts) =>\n    contacts.filter(item =>\n      item.name.toLowerCase().includes(filter.toLowerCase())\n    )\n);\n","import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n  display: flex;\n\n  flex-direction: column;\n  gap: 5px;\n\n  margin-bottom: 20px;\n`;\n","import { ContactItem } from 'components/ContactItem/ContactItem';\nimport { useSelector } from 'react-redux';\nimport { selectFilterContacts } from 'redux/selectors';\nimport { List } from './ContactList.styled';\n\nexport const ContactList = () => {\n  const getFilteredContacts = useSelector(selectFilterContacts);\n\n  return (\n    <List>\n      {getFilteredContacts.map(contact => {\n        return <ContactItem key={contact.id} {...contact} />;\n      })}\n    </List>\n  );\n};\n","import styled from '@emotion/styled';\nimport { BiSearchAlt } from 'react-icons/bi';\n\nexport const FilterBox = styled.div`\n  position: relative;\n  text-align: center;\n  width: 100%;\n`;\n\nexport const IconSearch = styled(BiSearchAlt)`\n  position: absolute;\n  top: 10px;\n  left: 5px;\n  color: grey;\n`;\n\nexport const FilterLabel = styled.label``;\n\nexport const FilterInput = styled.input`\n  display: block;\n  width: 100%;\n  height: calc(2.25rem + 2px);\n  padding: 1.25rem 2rem;\n  font-family: inherit;\n  font-size: 1rem;\n  font-weight: 400;\n  line-height: 1.5;\n  color: #212529;\n  background-color: #fff;\n\n  border: 1px solid #bdbdbd;\n  border-radius: 0.25rem;\n  transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;\n  -webkit-appearance: none;\n  -moz-appearance: none;\n  appearance: none;\n  :focus {\n    color: #212529;\n    background-color: #fff;\n    border-color: #bdbdbd;\n    outline: 0;\n    box-shadow: 0 0 0 0.2rem rgba(158, 158, 158, 0.25);\n  }\n`;\n","import { nanoid } from 'nanoid';\nimport { FilterBox, FilterInput, FilterLabel } from './Filter.styled';\n\nimport { IconSearch } from './Filter.styled';\nimport { useDispatch } from 'react-redux';\nimport { filterContacts } from 'redux/filter/filterSlice';\n\nconst filterInputId = nanoid();\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const handleFilterChange = e => {\n    dispatch(filterContacts(e.target.value.trim()));\n  };\n\n  return (\n    <FilterBox>\n      <IconSearch size={25} />\n      <FilterLabel\n        aria-label=\"find contacts by name\"\n        htmlFor={filterInputId}\n      ></FilterLabel>\n      <FilterInput\n        id={filterInputId}\n        type=\"text\"\n        name=\"filter\"\n        placeholder=\"Search...\"\n        onChange={handleFilterChange}\n      />\n    </FilterBox>\n  );\n};\n","import { ChildrenBox, Notification } from 'components/App.styled';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\nimport { Loader } from 'components/Loader/Loader';\nimport { Section } from 'components/Section/Section';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport {\n  selectContacts,\n  selectError,\n  selectIsLoading,\n} from 'redux/contacts/selectors';\nimport { errorNotify } from 'utils/notification';\nimport Container from '@mui/material/Container';\n\nexport default function Contacts() {\n  const contacts = useSelector(selectContacts);\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (!error) return;\n    errorNotify(error);\n  }, [error]);\n  return (\n    <main>\n      <Container maxWidth=\"xl\">\n        <Section title=\"Phonebook\">\n          <ContactForm />\n        </Section>\n        <Section title=\"Contacts\">\n          {contacts.length ? (\n            <ChildrenBox>\n              <Filter />\n              <ContactList />\n            </ChildrenBox>\n          ) : (\n            <Notification>There are no contacts in the phone book</Notification>\n          )}\n          {isLoading && !error && <Loader />}\n        </Section>\n      </Container>\n    </main>\n  );\n}\n","export const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectIsDeleting = state => state.contacts.isDeleting;\nexport const selectError = state => state.contacts.error;\n","export const selectFilter = state => state.filter;\n"],"names":["UserForm","styled","Form","InputBox","Label","FormInput","Field","FormRegLog","InputRegLog","LabelRegLog","Error","ErrorMessage","TitleBox","SectionBox","Title","Section","title","children","ChildrenBox","Notification","schema","yup","shape","name","min","max","trim","required","number","nameInputId","nanoid","numberInputId","initialValue","ContactForm","contacts","useSelector","selectContacts","dispatch","useDispatch","validationSchema","initialValues","onSubmit","values","resetForm","obj","findName","find","toLowerCase","findNumber","failureNameNotify","failureNumberNotify","addContact","addNewContact","htmlFor","id","type","pattern","component","Button","variant","size","endIcon","AddCircle","fontSize","Item","Text","ContainerBtn","style","position","top","left","transform","width","bgcolor","border","boxShadow","p","UpdateModalForm","useState","editBtnId","setEditBtnId","isEdit","setIsEdit","open","setOpen","IconButton","onClick","Edit","Loader","Modal","onClose","Box","sx","value","editContact","unwrap","finally","ContactItem","deleteBtnId","setDeleteBtnId","isDeleting","setIsDeleting","deleteContact","onBtnDeleteClick","disabled","Delete","createSelector","require","selectFilter","selectSortContacts","sort","a","b","localeCompare","selectFilterContacts","filter","item","includes","List","ContactList","getFilteredContacts","map","contact","FilterBox","IconSearch","BiSearchAlt","FilterLabel","FilterInput","filterInputId","Filter","placeholder","onChange","e","filterContacts","target","Contacts","isLoading","selectIsLoading","error","selectError","useEffect","fetchContacts","errorNotify","Container","maxWidth","length","state","items","selectIsDeleting"],"sourceRoot":""}