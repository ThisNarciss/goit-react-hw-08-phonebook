{"version":3,"file":"static/js/111.6bb96d67.chunk.js","mappings":"+NAIMA,GAAUC,EAAAA,EAAAA,MACVC,GAAaD,EAAAA,EAAAA,MAEZ,SAASE,IACd,IAAMC,GAAWC,EAAAA,EAAAA,MAYjB,OACE,kBAAMC,SAXiB,SAAAC,GACvBA,EAAEC,iBACF,IAAMC,EAAW,CACfC,MAAOH,EAAEI,OAAOD,MAAME,MACtBC,SAAUN,EAAEI,OAAOE,SAASD,OAG9BR,GAASU,EAAAA,EAAAA,IAAUL,IACnBF,EAAEI,OAAOI,OACV,EAEC,WACE,kBAAOC,QAAShB,KAChB,kBAAOiB,KAAK,QAAQC,KAAK,QAAQC,GAAInB,KACrC,kBAAOgB,QAASd,KAChB,kBAAOe,KAAK,WAAWC,KAAK,WAAWC,GAAIjB,KAC3C,yCAGL,CC3Bc,SAASkB,IACtB,OAAO,SAACjB,EAAD,GACR,C,wDCHM,IAkBIF,EAAS,eAACoB,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACN,EAAIO,GAWvD,OAREP,IAFFO,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["components/LoginForm/LoginForm.jsx","pages/Login.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import { nanoid } from 'nanoid';\nimport { useDispatch } from 'react-redux';\nimport { loginUser } from 'redux/auth/operations';\n\nconst emailId = nanoid();\nconst passwordId = nanoid();\n\nexport function LoginForm() {\n  const dispatch = useDispatch();\n\n  const handleFormSubmit = e => {\n    e.preventDefault();\n    const formData = {\n      email: e.target.email.value,\n      password: e.target.password.value,\n    };\n\n    dispatch(loginUser(formData));\n    e.target.reset();\n  };\n  return (\n    <form onSubmit={handleFormSubmit}>\n      <label htmlFor={emailId}></label>\n      <input type=\"email\" name=\"email\" id={emailId} />\n      <label htmlFor={passwordId}></label>\n      <input type=\"password\" name=\"password\" id={passwordId} />\n      <button>submit</button>\n    </form>\n  );\n}\n","import { LoginForm } from 'components/LoginForm/LoginForm';\n\nexport default function Login() {\n  return <LoginForm />;\n}\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["emailId","nanoid","passwordId","LoginForm","dispatch","useDispatch","onSubmit","e","preventDefault","formData","email","target","value","password","loginUser","reset","htmlFor","type","name","id","Login","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}